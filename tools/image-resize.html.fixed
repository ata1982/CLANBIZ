<!DOCTYPE html>
<html lang="ja">
<head>
  <script src="/js/prevent-duplicate-includes.js"></script>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="description" content="画像を簡単にリサイズできる無料ツール。ウェブサイト用、SNS用、印刷用など様々なプリセットから選べます。複数画像の一括リサイズにも対応。">
  <title>画像リサイズツール | まえゆきツール</title>

  <!-- リソースの先読み -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>

  <!-- 共通CSSとフォント -->
  <link rel="stylesheet" href="/css/style.css">
  <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@400;700&display=swap" rel="stylesheet">
  
  <!-- ツール共通CSS -->
  <link rel="stylesheet" href="/css/tools-common.css">
  <link rel="stylesheet" href="/css/image-tools-styles.css">
  
  <!-- フッターのスタイル -->
  <link rel="stylesheet" href="/css/footer-hover.css">

  <style>
    .tool-content {
      max-width: 1000px;
      margin: 0 auto;
    }
    
    .preview-container {
      display: flex;
      flex-wrap: wrap;
      gap: 15px;
      margin-top: 20px;
    }
    
    .file-item {
      position: relative;
      width: 150px;
      height: 150px;
      background-color: #f5f5f5;
      border-radius: 8px;
      overflow: hidden;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .file-preview {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    
    .file-name {
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      background: rgba(0,0,0,0.7);
      color: white;
      padding: 5px;
      font-size: 12px;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    
    .file-remove {
      position: absolute;
      top: 5px;
      right: 5px;
      width: 24px;
      height: 24px;
      background: rgba(255,255,255,0.7);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      font-size: 14px;
      font-weight: bold;
      color: #f44336;
      border: none;
    }
    
    .resize-settings {
      margin-top: 20px;
      background: white;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    }
    
    .setting-row {
      margin-bottom: 15px;
    }
    
    .setting-row label {
      display: block;
      margin-bottom: 5px;
      font-weight: bold;
      color: #333;
    }
    
    .settings-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 15px;
    }
    
    .settings-title {
      font-size: 18px;
      font-weight: bold;
      color: #333;
      margin: 0;
    }
    
    .preset-tabs {
      display: flex;
      background: #f0f0f0;
      border-radius: 30px;
      padding: 3px;
      margin-bottom: 15px;
      overflow-x: auto;
      white-space: nowrap;
      -webkit-overflow-scrolling: touch;
    }
    
    .preset-tab {
      padding: 8px 16px;
      cursor: pointer;
      border-radius: 30px;
      font-size: 14px;
      transition: all 0.2s;
    }
    
    .preset-tab:hover {
      background: rgba(0,0,0,0.05);
    }
    
    .preset-tab.active {
      background: #fff;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      font-weight: bold;
    }
    
    .preset-description {
      font-size: 14px;
      color: #666;
      margin-top: 5px;
      font-style: italic;
    }
    
    .dimension-inputs {
      display: flex;
      gap: 15px;
    }
    
    .dimension-group {
      flex: 1;
    }
    
    .dimension-input {
      width: 100%;
      padding: 8px 12px;
      border: 1px solid #ddd;
      border-radius: 5px;
      font-size: 16px;
    }
    
    .checkbox-container {
      display: flex;
      align-items: center;
      margin-top: 10px;
    }
    
    .checkbox-container input {
      margin-right: 8px;
    }
    
    .quality-select {
      padding: 8px 12px;
      border: 1px solid #ddd;
      border-radius: 5px;
      width: 100%;
      font-size: 16px;
    }
    
    .action-button {
      display: block;
      width: 100%;
      padding: 12px;
      background: var(--primary);
      color: white;
      border: none;
      border-radius: 5px;
      font-size: 16px;
      font-weight: bold;
      cursor: pointer;
      transition: all 0.2s;
      margin-top: 20px;
    }
    
    .action-button:hover {
      background: var(--primary-dark);
    }
    
    .action-button:disabled {
      background: #cccccc;
      cursor: not-allowed;
    }
    
    .progress-container {
      margin-top: 20px;
      display: none;
    }
    
    .progress-bar-container {
      height: 10px;
      background: #eee;
      border-radius: 5px;
      overflow: hidden;
      margin-bottom: 5px;
    }
    
    .progress-bar {
      height: 100%;
      background: var(--primary);
      width: 0%;
      transition: width 0.3s;
    }
    
    .progress-text {
      text-align: center;
      font-size: 14px;
      color: #666;
    }
    
    /* モバイル対応 */
    @media (max-width: 768px) {
      .dimension-inputs {
        flex-direction: column;
        gap: 10px;
      }
      
      .preset-tabs {
        padding: 2px;
      }
      
      .preset-tab {
        padding: 6px 12px;
        font-size: 13px;
      }
    }
  </style>

  <!-- JavaScriptの遅延ロード -->
  <script src="/js/script.js" defer></script>

  <link rel="icon" href="/images/favicon.ico">
  <meta property="og:title" content="画像リサイズツール | まえゆきツール">
  <meta property="og:description" content="画像を簡単にリサイズできる無料ツール。ウェブサイト用、SNS用、印刷用など様々なプリセットから選べます。複数画像の一括リサイズにも対応。">
  <meta property="og:image" content="/images/tool-ogp.webp">
  <meta property="og:type" content="website">
</head>
<body>
  <!-- ヘッダー -->
  <div id="header-placeholder"></div>

  <!-- メインコンテンツ -->
  <main>
    <section class="tool-section">
      <div class="app-wrapper">
        <div class="tool-container">
          <div class="tool-header">
            <h1>画像リサイズツール</h1>
            <p class="tool-description">画像のサイズを変更できる無料ツールです。SNS用、Web用など各種プリセットを用意しています。複数の画像を一度にリサイズすることもできます。</p>
          </div>
        
          <div class="tool-content">
            <!-- ファイルドロップエリア -->
            <div class="file-drop-area" id="dropArea">
              <span class="drop-zone-prompt">
                <svg width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                  <polyline points="17 8 12 3 7 8"></polyline>
                  <line x1="12" y1="3" x2="12" y2="15"></line>
                </svg>
                <p>ここに画像をドラッグ＆ドロップ<br>または</p>
                <label class="file-select-button">
                  画像を選択
                  <input type="file" id="fileInput" accept="image/*" multiple hidden>
                </label>
              </span>
            </div>
            
            <!-- プレビューエリア -->
            <div class="file-meta" id="filesMeta"></div>
            <div class="preview-container" id="filesContainer"></div>
            
            <!-- リサイズ設定 -->
            <div class="resize-settings">
              <div class="settings-header">
                <h2 class="settings-title">リサイズ設定</h2>
              </div>
              
              <!-- プリセットタブ -->
              <div class="preset-tabs">
                <div class="preset-tab active" data-preset="custom">カスタム</div>
                <div class="preset-tab" data-preset="web">Web用</div>
                <div class="preset-tab" data-preset="sns">SNS用</div>
                <div class="preset-tab" data-preset="print">印刷用</div>
                <div class="preset-tab" data-preset="thumbnail">サムネイル</div>
              </div>
              
              <div class="preset-description" id="presetDescription">自分で設定を選べます</div>
              
              <!-- 寸法設定 -->
              <div class="setting-row">
                <label>最大サイズ</label>
                <div class="dimension-inputs">
                  <div class="dimension-group">
                    <input type="number" id="maxWidth" class="dimension-input" value="1200" min="1" placeholder="幅">
                    <span class="unit">px</span>
                  </div>
                  <div class="dimension-group">
                    <input type="number" id="maxHeight" class="dimension-input" value="1200" min="1" placeholder="高さ">
                    <span class="unit">px</span>
                  </div>
                </div>
                <div class="checkbox-container">
                  <input type="checkbox" id="lockAspectRatio" checked>
                  <label for="lockAspectRatio">縦横比を維持する</label>
                </div>
              </div>
              
              <!-- 画質設定 -->
              <div class="setting-row">
                <label>画質</label>
                <select id="qualitySelect" class="quality-select">
                  <option value="60">低 (軽量・60%)</option>
                  <option value="85" selected>中 (バランス・85%)</option>
                  <option value="100">高 (最高品質・100%)</option>
                </select>
              </div>
              
              <!-- 実行ボタン -->
              <button id="resizeBtn" class="action-button" disabled>リサイズしてダウンロード</button>
              
              <!-- 進捗表示 -->
              <div class="progress-container" id="progressContainer">
                <div class="progress-bar-container">
                  <div class="progress-bar" id="progressBar"></div>
                </div>
                <div class="progress-text" id="progressText">処理中...</div>
              </div>
            </div>
            
            <!-- 使い方ガイド -->
            <div class="usage-box">
              <h3>使い方</h3>
              <ul class="usage-list">
                <li>画像をドラッグ＆ドロップするか、「画像を選択」ボタンで画像を追加します</li>
                <li>用途に合わせてプリセットを選択するか、カスタム設定を行います</li>
                <li>「リサイズしてダウンロード」ボタンをクリックすると処理が開始されます</li>
                <li>複数の画像を選択した場合は、自動的にZIPファイルでダウンロードされます</li>
              </ul>
            </div>
            
          </div>
          
          <!-- その他のまえゆきツール -->
          <div class="other-tools">
            <h2 class="other-tools-title">その他のまえゆきツール</h2>
            <div class="tools-list">
              <a href="countdown.html" class="tool-link">カウントダウンタイマー</a>
              <a href="roulette.html" class="tool-link">ルーレット</a>
              <a href="png-to-jpeg.html" class="tool-link">PNG→JPEG変換</a>
              <a href="png-jpeg-to-webp.html" class="tool-link">WebP変換</a>
              <a href="wareki-seireki.html" class="tool-link">年齢・和暦計算</a>
              <a href="meme-generator.html" class="tool-link">ミーム作成</a>
              <a href="color-palette.html" class="tool-link">カラーパレット</a>
              <a href="letters-counter.html" class="tool-link">文字数カウント</a>
            </div>
          </div>
        </div>
      </div>
    </section>

  <!-- SVGアイコン -->
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
    <symbol id="icon-pdf" viewBox="0 0 24 24">
      <path d="M20 2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-8.5 7.5c0 .83-.67 1.5-1.5 1.5H9v2H7.5V7H10c.83 0 1.5.67 1.5 1.5v1zm5 2c0 .83-.67 1.5-1.5 1.5h-2.5V7H15c.83 0 1.5.67 1.5 1.5v3zm4-3H19v1h1.5V11H19v2h-1.5V7h3v1.5zM9 9.5h1v-1H9v1zM4 6H2v14c0 1.1.9 2 2 2h14v-2H4V6zm10 5.5h1v-3h-1v3z"></path>
    </symbol>
  </svg>

  <!-- JSZipの読み込み -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>

  <!-- 画像リサイズ用JavaScript -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
        // 要素の参照
        const dropArea = document.getElementById('dropArea');
        const fileInput = document.getElementById('fileInput');
        const filesContainer = document.getElementById('filesContainer');
        const filesMeta = document.getElementById('filesMeta');
        const maxWidthInput = document.getElementById('maxWidth');
        const maxHeightInput = document.getElementById('maxHeight');
        const lockAspectRatio = document.getElementById('lockAspectRatio');
        const qualitySelect = document.getElementById('qualitySelect');
        const presetTabs = document.querySelectorAll('.preset-tab');
        const resizeBtn = document.getElementById('resizeBtn');
        const progressContainer = document.getElementById('progressContainer');
        const progressBar = document.getElementById('progressBar');
        const progressText = document.getElementById('progressText');
        
        // 状態管理
        let selectedFiles = [];
        let resizedImages = [];
        let originalAspectRatio = 1;
        
        // プリセット設定
        const presets = {
            custom: {
                width: 1200,
                height: 1200,
                quality: 85,
                description: "自分で設定を選べます"
            },
            web: {
                width: 1024,
                height: 768,
                quality: 60,
                description: "Webサイト用に最適化（軽量）"
            },
            sns: {
                width: 1080,
                height: 1080,
                quality: 85,
                description: "Instagram/Twitter等のSNS用"
            },
            print: {
                width: 2048,
                height: 2048,
                quality: 100,
                description: "印刷用の高画質設定"
            },
            thumbnail: {
                width: 300,
                height: 300,
                quality: 85,
                description: "サムネイル用の小さいサイズ"
            }
        };
        
        // プリセットタブ切り替え
        presetTabs.forEach(tab => {
            tab.addEventListener('click', function() {
                // アクティブタブ切り替え
                presetTabs.forEach(t => t.classList.remove('active'));
                this.classList.add('active');
                
                // プリセット設定適用
                const presetKey = this.getAttribute('data-preset');
                const preset = presets[presetKey];
                
                maxWidthInput.value = preset.width;
                maxHeightInput.value = preset.height;
                
                // 画質設定を更新
                setQualityByValue(preset.quality);
            });
        });
        
        // 画質値に対応するセレクトオプションを選択
        function setQualityByValue(value) {
            if (value <= 60) {
                qualitySelect.value = '60';
            } else if (value >= 100) {
                qualitySelect.value = '100';
            } else {
                qualitySelect.value = '85';
            }
        }
        
        // アスペクト比維持の処理
        function updateAspectRatio() {
            if (!lockAspectRatio.checked) return;
            
            // 現在のフォーカスされている要素を取得
            const focused = document.activeElement;
            
            // 幅が変更された場合は高さを調整
            if (focused === maxWidthInput) {
                const newWidth = parseInt(maxWidthInput.value) || 0;
                maxHeightInput.value = Math.round(newWidth / originalAspectRatio);
            } 
            // 高さが変更された場合は幅を調整
            else if (focused === maxHeightInput) {
                const newHeight = parseInt(maxHeightInput.value) || 0;
                maxWidthInput.value = Math.round(newHeight * originalAspectRatio);
            }
        }
        
        // 入力フィールドの変更をリッスン
        maxWidthInput.addEventListener('input', updateAspectRatio);
        maxHeightInput.addEventListener('input', updateAspectRatio);
        
        // 共通関数を使用してファイルドロップ設定
        setupFileDropAndSelection(dropArea, fileInput, handleFiles);
        
        // ファイル処理
        function handleFiles(files) {
            const validFiles = Array.from(files).filter(file => {
                const type = file.type.toLowerCase();
                return type === 'image/jpeg' || type === 'image/png' || type === 'image/gif';
            });
            
            if (validFiles.length === 0) return;
            
            // 既存のファイルに追加
            selectedFiles = [...selectedFiles, ...validFiles];
            
            // 1つ目の画像のアスペクト比を計算し保存
            if (selectedFiles.length === validFiles.length) {
                const img = new Image();
                const reader = new FileReader();
                
                reader.onload = function(e) {
                    img.onload = function() {
                        originalAspectRatio = img.width / img.height;
                        // 初期値を設定
                        if (lockAspectRatio.checked) {
                            maxHeightInput.value = Math.round(parseInt(maxWidthInput.value) / originalAspectRatio);
                        }
                    };
                    img.src = e.target.result;
                };
                reader.readAsDataURL(validFiles[0]);
            }
            
            // UIを更新
            updateFilesUI();
            updateFilesMetaUI();
            
            // リサイズボタンを有効化
            resizeBtn.disabled = selectedFiles.length === 0;
        }
        
        // ファイルUI更新（共通関数の一部を活用）
        function updateFilesUI() {
            filesContainer.innerHTML = '';
            
            selectedFiles.forEach((file, index) => {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const fileItem = createFileItem(file, e.target.result, () => {
                        selectedFiles.splice(index, 1);
                        updateFilesUI();
                        updateFilesMetaUI();
                        resizeBtn.disabled = selectedFiles.length === 0;
                    });
                    filesContainer.appendChild(fileItem);
                };
                reader.readAsDataURL(file);
            });
        }
        
        // ファイルメタ情報更新
        function updateFilesMetaUI() {
            if (selectedFiles.length === 0) {
                filesMeta.textContent = '';
                return;
            }
            
            let totalSize = 0;
            selectedFiles.forEach(file => {
                totalSize += file.size;
            });
            
            const sizeInMB = (totalSize / (1024 * 1024)).toFixed(2);
            filesMeta.textContent = `${selectedFiles.length}枚の画像（合計 ${sizeInMB} MB）`;
        }
        
        // リサイズボタン
        resizeBtn.addEventListener('click', async function() {
            if (selectedFiles.length === 0) return;
            
            // ボタンを無効化して処理中表示
            resizeBtn.disabled = true;
            resizeBtn.textContent = '処理中...';
            
            // 進捗表示を表示
            progressContainer.style.display = 'block';
            progressBar.style.width = '0%';
            progressText.textContent = '画像処理中 (0/' + selectedFiles.length + ')';
            
            // サイズ設定を取得
            const maxWidth = parseInt(maxWidthInput.value) || 1200;
            const maxHeight = parseInt(maxHeightInput.value) || 1200;
            const quality = parseInt(qualitySelect.value);
            
            // 画像を非同期でリサイズ
            resizedImages = [];
            
            for (let i = 0; i < selectedFiles.length; i++) {
                const file = selectedFiles[i];
                try {
                    const resizedBlob = await resizeImage(file, maxWidth, maxHeight, quality);
                    resizedImages.push({
                        name: file.name,
                        blob: resizedBlob
                    });
                    
                    // 進捗表示更新
                    const progress = Math.round(((i + 1) / selectedFiles.length) * 100);
                    progressBar.style.width = progress + '%';
                    progressText.textContent = `画像処理中 (${i + 1}/${selectedFiles.length})`;
                } catch (err) {
                    console.error('リサイズエラー:', err);
                    // 共通関数を使用したエラーメッセージ表示
                    updateUI('処理エラーが発生しました', true);
                }
            }
            
            // 処理完了メッセージを表示
            progressText.textContent = 'ダウンロード準備完了！';
            
            // ZIPファイルを作成してダウンロード
            await downloadResizedImages();
            
            // 共通関数でUI更新
            updateUI('画像処理が完了しました！');
            
            // 進捗バーを非表示にして、ボタンを元に戻す
            setTimeout(() => {
                progressContainer.style.display = 'none';
                resizeBtn.textContent = 'リサイズしてダウンロード';
                resizeBtn.disabled = false;
            }, 1000);
        });
        
        // 画像リサイズ処理
        function resizeImage(file, maxWidth, maxHeight, quality) {
            return new Promise((resolve, reject) => {
                const img = new Image();
                
                img.onload = function() {
                    const origWidth = img.width;
                    const origHeight = img.height;
                    const aspectRatio = origWidth / origHeight;
                    
                    // 比率を維持したままリサイズ
                    let newWidth = maxWidth;
                    let newHeight = newWidth / aspectRatio;
                    
                    // 最大高さに合わせてリサイズ
                    if (newHeight > maxHeight) {
                        newHeight = maxHeight;
                        newWidth = newHeight * aspectRatio;
                    }
                    
                    // 小数点以下を切り捨て
                    newWidth = Math.floor(newWidth);
                    newHeight = Math.floor(newHeight);
                    
                    // リサイズの必要がなければ元の画像を返す
                    if (newWidth >= origWidth && newHeight >= origHeight) {
                        file.arrayBuffer().then(buffer => {
                            resolve(new Blob([buffer], { type: file.type }));
                        }).catch(reject);
                        return;
                    }
                    
                    // キャンバスでリサイズ
                    const canvas = document.createElement('canvas');
                    canvas.width = newWidth;
                    canvas.height = newHeight;
                    
                    const ctx = canvas.getContext('2d');
                    ctx.drawImage(img, 0, 0, newWidth, newHeight);
                    
                    // JPEG/PNGで出力
                    const mimeType = file.type;
                    
                    canvas.toBlob(blob => {
                        resolve(blob);
                    }, mimeType, quality / 100);
                };
                
                img.onerror = reject;
                
                // 画像読み込み
                const reader = new FileReader();
                reader.onload = function(e) {
                    img.src = e.target.result;
                };
                reader.onerror = reject;
                reader.readAsDataURL(file);
            });
        }
        
        // 画像ダウンロード処理
        async function downloadResizedImages() {
            if (resizedImages.length === 0) return;
            
            // 単一画像の場合は直接ダウンロード
            if (resizedImages.length === 1) {
                const url = URL.createObjectURL(resizedImages[0].blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `resized_${resizedImages[0].name}`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                return;
            }
            
            // 複数画像の場合はZIPでダウンロード
            const zip = new JSZip();
            
            // 画像をZIPに追加
            resizedImages.forEach(image => {
                zip.file(image.name, image.blob);
            });
            
            // 進捗テキスト更新
            progressText.textContent = 'ZIPファイル作成中...';
            
            // ZIPを生成してダウンロード
            const content = await zip.generateAsync({ type: 'blob' });
            const url = URL.createObjectURL(content);
            const a = document.createElement('a');
            a.href = url;
            a.download = `resized_images_${new Date().toISOString().slice(0, 10)}.zip`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            // 進捗テキスト更新
            progressText.textContent = 'ダウンロード完了！';
        }
    });
  </script>
</main>

<!-- フッター -->
<div id="footer-placeholder"></div>
<script>
  if (!window.isScriptLoaded || !window.isScriptLoaded('/js/include.js')) {
      document.write('<script src="/js/include.js"><\/script>');
  } else {
      console.log('include.jsのロードをスキップしました');
  }
</script>

<script src="/js/script.js"></script>
</body>
</html>
