<!DOCTYPE html>
<html lang="ja">
<head>
    <script src="/js/prevent-duplicate-includes.js"></script>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="description" content="オンラインルーレットツールで選択肢からランダムに結果を選びます。人数分け、料理選び、判断などあらゆるシーンで活用できます。">
  <title>ルーレット | まえゆきツール</title>

  <!-- リソースの先読み -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>

  <!-- 共通CSSとフォント -->
  <link rel="stylesheet" href="/css/style.css">
  <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@400;700&display=swap" rel="stylesheet">
  
  <!-- ツール共通CSS -->
  <link rel="stylesheet" href="/css/tools-common.css">
  <!-- 個別ツールのスタイル -->  
  <style>
    .roulette-container {
      max-width: 600px;
      margin: 0 auto;
      padding: 20px;
      background-color: #f9f9f9;
      border-radius: 12px;
      box-shadow: 0 3px 8px rgba(0,0,0,0.12);
    }

    .template-area {
      background-color: #fff;
      padding: 20px;
      border-radius: 10px;
      margin-bottom: 25px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.08);
      border: 1px solid #eaeaea;
    }

    .template-title {
      font-size: 18px;
      font-weight: bold;
      margin-bottom: 15px;
      color: #333;
      text-align: center;
      position: relative;
      padding-bottom: 10px;
    }
    
    .template-title:after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 50%;
      transform: translateX(-50%);
      width: 50px;
      height: 3px;
      background-color: #2196f3;
      border-radius: 3px;
    }

    .roulette {
      position: relative;
      width: 300px;
      height: 300px;
      margin: 30px auto;
    }

    .wheel {
      width: 100%;
      height: 100%;
      border-radius: 50%;
      position: relative;
      overflow: hidden;
      transition: transform 5s cubic-bezier(0.25, 0.1, 0.25, 1);
      box-shadow: 0 0 10px rgba(0,0,0,0.3);
    }

    .wheel-center {
      position: absolute;
      width: 30px;
      height: 30px;
      background: white;
      border-radius: 50%;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      z-index: 10;
      box-shadow: 0 0 5px rgba(0,0,0,0.5);
    }

    .pointer {
      position: absolute;
      top: 0;
      left: 50%;
      width: 0;
      height: 0;
      border-left: 15px solid transparent;
      border-right: 15px solid transparent;
      border-top: 30px solid #ff5252;
      transform: translateX(-50%);
      z-index: 2;
    }

    .slice {
      position: absolute;
      width: 100%;
      height: 100%;
      clip-path: polygon(50% 50%, 50% 0%, 100% 0%, 100% 100%, 50% 100%);
      transform-origin: center;
    }

    .slice-text {
      position: absolute;
      left: 50%;
      top: 15%;
      transform: translateX(-50%) rotate(90deg);
      text-align: center;
      width: 120px;
      font-weight: bold;
      color: white;
      text-shadow: 1px 1px 2px rgba(0,0,0,0.7);
    }

    .controls {
      text-align: center;
      margin: 20px 0;
    }

    .options-container {
      margin: 0 0 25px;
      padding: 18px;
      background-color: #f5f9ff;
      border-radius: 8px;
      border: 1px solid #e0e9f5;
    }
    
    .options-toggle-container {
      text-align: center;
      margin-top: 20px;
    }

    .btn-toggle {
      background-color: #ebf5ff;
      color: #2196f3;
      border: 1px solid #d0e5ff;
      border-radius: 6px;
      padding: 10px 18px;
      font-size: 15px;
      cursor: pointer;
      transition: all 0.2s;
      font-weight: 500;
      display: inline-flex;
      align-items: center;
      justify-content: center;
    }

    .btn-toggle:hover {
      background-color: #d0e5ff;
    }

    .toggle-icon {
      font-size: 12px;
      margin-left: 8px;
      transition: transform 0.3s;
    }
    
    .toggle-icon.open {
      transform: rotate(180deg);
    }

    .option-row {
      display: flex;
      margin-bottom: 12px;
      align-items: center;
    }

    .option-input {
      flex-grow: 1;
      padding: 10px 12px;
      border: 1px solid #ddd;
      border-radius: 6px;
      margin-right: 10px;
      font-size: 15px;
      transition: border-color 0.2s;
    }
    
    .option-input:focus {
      border-color: #2196f3;
      outline: none;
      box-shadow: 0 0 0 2px rgba(33, 150, 243, 0.2);
    }

    .btn-remove {
      background-color: #ff5252;
      color: white;
      border: none;
      border-radius: 6px;
      padding: 8px 12px;
      cursor: pointer;
      transition: all 0.2s;
    }
    
    .btn-remove:hover {
      background-color: #ff1744;
      transform: translateY(-2px);
    }

    .btn-add {
      background-color: #4caf50;
      color: white;
      border: none;
      border-radius: 6px;
      padding: 10px 15px;
      margin: 15px auto;
      cursor: pointer;
      display: block;
      font-weight: 500;
      transition: all 0.2s;
    }
    
    .btn-add:hover {
      background-color: #43a047;
      transform: translateY(-2px);
      box-shadow: 0 3px 6px rgba(76, 175, 80, 0.2);
    }

    .btn-spin {
      background-color: #2196f3;
      color: white;
      border: none;
      border-radius: 8px;
      padding: 15px 35px;
      font-size: 18px;
      font-weight: bold;
      cursor: pointer;
      transition: all 0.3s;
      box-shadow: 0 3px 8px rgba(33, 150, 243, 0.3);
      position: relative;
      overflow: hidden;
    }
    
    .btn-spin:after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(rgba(255,255,255,0.2), rgba(255,255,255,0));
      transition: transform 0.3s;
    }

    .btn-spin:hover {
      background-color: #1e88e5;
      transform: translateY(-3px);
      box-shadow: 0 5px 12px rgba(33, 150, 243, 0.4);
    }
    
    .btn-spin:hover:after {
      transform: translateY(100%);
    }

    .btn-spin:active {
      transform: translateY(-1px);
      box-shadow: 0 3px 6px rgba(33, 150, 243, 0.3);
    }
    
    .btn-spin:disabled {
      background-color: #90caf9;
      cursor: not-allowed;
      transform: none;
      box-shadow: none;
    }

    .result {
      text-align: center;
      margin-top: 25px;
      padding: 20px;
      font-size: 22px;
      font-weight: bold;
      min-height: 30px;
      color: #333;
      background-color: #f5f5f5;
      border-radius: 10px;
      transition: all 0.4s;
      border: 1px solid #eee;
    }

    .result.active {
      background-color: #e8f5e9;
      border-color: #a5d6a7;
      box-shadow: 0 4px 10px rgba(76, 175, 80, 0.15);
      transform: scale(1.02);
    }

    .template-buttons {
      display: flex;
      flex-wrap: wrap;
      gap: 12px;
      margin-bottom: 20px;
      justify-content: center;
    }

    .template-btn {
      background-color: #f5f5f5;
      border: 1px solid #ddd;
      border-radius: 6px;
      padding: 12px 18px;
      cursor: pointer;
      font-size: 16px;
      transition: all 0.3s;
      font-weight: 500;
      flex: 1 0 40%;
      max-width: 140px;
      text-align: center;
      box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .template-btn:hover {
      background-color: #e8f4fd;
      transform: translateY(-2px);
      box-shadow: 0 3px 6px rgba(33, 150, 243, 0.15);
    }

    .template-btn.active {
      background-color: #2196f3;
      color: white;
      border-color: #2196f3;
      box-shadow: 0 3px 7px rgba(33, 150, 243, 0.3);
      transform: translateY(-2px);
    }
    
    @media (max-width: 600px) {
      .roulette {
        width: 250px;
        height: 250px;
      }
      
      .slice-text {
        width: 100px;
        font-size: 14px;
      }
    }
  </style>

  <!-- JavaScriptの遅延ロード -->
  <script src="/js/script.js" defer></script>
  

  <link rel="icon" href="/images/favicon.ico">
  <meta property="og:title" content="ルーレット | まえゆきツール">
  <meta property="og:description" content="オンラインルーレットツールで選択肢からランダムに結果を選びます。人数分け、料理選び、判断などあらゆるシーンで活用できます。">
  <meta property="og:image" content="/images/tool-ogp.webp">
  <meta property="og:type" content="website">
</head>
<body>
<!-- header -->  <!-- ヘッダー -->
  <div id="header-placeholder"></div>
  

  <!-- メインコンテンツ -->
  <main>
    <!-- ツールのコンテナ -->
    <div class="app-wrapper">
      <div class="tool-container">        <div class="tool-header">
          <h1>ルーレット</h1>
          <p class="tool-description">選択肢からランダムに結果を選ぶオンラインルーレットです。人数の割り振りや料理選びなど、様々なシーンでご活用ください。</p>
        </div>
        <!-- ツール固有のコンテンツ -->
        <div class="tool-content">
          <div class="roulette-container">
            <div class="template-area">
              <p class="template-title">用途を選んでください</p>
              <div class="template-buttons">
                <button class="template-btn active" data-template="foods">料理選び</button>
                <button class="template-btn" data-template="members">チーム分け</button>
                <button class="template-btn" data-template="colors">色選び</button>
                <button class="template-btn" data-template="yesno">Yes/No</button>
              </div>
              
              <div class="options-toggle-container">
                <button class="btn-toggle" id="btnToggleOptions">オプションを編集する <span class="toggle-icon">▼</span></button>
              </div>
            </div>
            
            <div class="options-container" id="optionsContainer" style="display: none;">
              <!-- オプション入力フィールドはJavaScriptで生成 -->
            </div>
            
            <button class="btn-add" id="btnAdd" style="display: none;">オプションを追加</button>

            <div class="roulette">
              <div class="pointer"></div>
              <div class="wheel" id="wheel"></div>
              <div class="wheel-center"></div>
            </div>
            
            <div class="controls">
              <button class="btn-spin" id="btnSpin">回転する</button>
            </div>
            
            <div class="result" id="result"></div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- その他のまえゆきツール -->
    <div class="other-tools">
      <h2 class="other-tools-title">その他のまえゆきツール</h2>
      <div class="tools-list">
        <a href="countdown.html" class="tool-link">カウントダウンタイマー</a>
        <a href="calc.html" class="tool-link">単位換算と計算</a>
        <a href="image-resize.html" class="tool-link">画像リサイズ</a>
        <a href="png-to-jpeg.html" class="tool-link">PNG→JPEG変換</a>
        <a href="png-jpeg-to-webp.html" class="tool-link">WebP変換</a>
        <a href="wareki-seireki.html" class="tool-link">年齢・和暦計算</a>
        <a href="meme-generator.html" class="tool-link">ミーム作成</a>
        <a href="color-palette.html" class="tool-link">カラーパレット</a>
        <a href="letters-counter.html" class="tool-link">文字数カウント</a>
      </div>
    </div>
  </main>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const wheel = document.getElementById('wheel');
      const btnSpin = document.getElementById('btnSpin');
      const btnAdd = document.getElementById('btnAdd');
      const optionsContainer = document.getElementById('optionsContainer');
      const resultElement = document.getElementById('result');
      const templateButtons = document.querySelectorAll('.template-btn');
      const btnToggleOptions = document.getElementById('btnToggleOptions');
      const toggleIcon = btnToggleOptions.querySelector('.toggle-icon');
      
      // 色の配列
      const colors = [
        '#FF5252', '#FF4081', '#E040FB', '#7C4DFF', '#536DFE',
        '#448AFF', '#40C4FF', '#18FFFF', '#64FFDA', '#69F0AE',
        '#B2FF59', '#EEFF41', '#FFFF00', '#FFD740', '#FFAB40'
      ];
      
      // 初期オプション - 料理選びをデフォルトにする
      let options = ['ラーメン', 'カレー', 'ハンバーグ', '寿司', 'パスタ', 'サラダ', 'うどん'];
      let spinning = false;
      let currentRotation = 0;
      
      // テンプレートのオプション
      const templates = {
        foods: ['ラーメン', 'カレー', 'ハンバーグ', '寿司', 'パスタ', 'サラダ', 'うどん'],
        members: ['Aチーム', 'Bチーム', 'Cチーム', 'Dチーム'],
        colors: ['赤', '青', '緑', '黄色', '紫', 'オレンジ', 'ピンク'],
        yesno: ['YES', 'NO', 'MAYBE']
      };

      // オプションの初期表示
      renderOptionInputs();
      renderWheel();
      
      // 「オプションを追加」ボタンのクリックイベント
      btnAdd.addEventListener('click', () => {
        options.push(`オプション${options.length + 1}`);
        renderOptionInputs();
        renderWheel();
      });
      
      // テンプレートボタンのクリックイベント
      templateButtons.forEach(button => {
        button.addEventListener('click', () => {
          // アクティブクラスを全てのボタンから削除
          templateButtons.forEach(btn => btn.classList.remove('active'));
          // クリックされたボタンにアクティブクラスを追加
          button.classList.add('active');
          
          const templateName = button.getAttribute('data-template');
          if (templates[templateName]) {
            options = [...templates[templateName]];
            renderOptionInputs();
            renderWheel();
          }
        });
      });
      
      // オプショントグルボタンのクリックイベント
      btnToggleOptions.addEventListener('click', () => {
        const isVisible = optionsContainer.style.display !== 'none';
        optionsContainer.style.display = isVisible ? 'none' : 'block';
        btnAdd.style.display = isVisible ? 'none' : 'block';
        toggleIcon.textContent = isVisible ? '▼' : '▲';
      });
      
      // 「回転する」ボタンのクリックイベント
      btnSpin.addEventListener('click', spinWheel);
      
      // オプション入力フィールドの表示
      function renderOptionInputs() {
        optionsContainer.innerHTML = '';
        options.forEach((option, index) => {
          const row = document.createElement('div');
          row.className = 'option-row';
          
          const input = document.createElement('input');
          input.type = 'text';
          input.className = 'option-input';
          input.value = option;
          input.addEventListener('input', (e) => {
            options[index] = e.target.value;
            renderWheel();
          });
          
          const removeBtn = document.createElement('button');
          removeBtn.className = 'btn-remove';
          removeBtn.textContent = '削除';
          removeBtn.addEventListener('click', () => {
            options.splice(index, 1);
            renderOptionInputs();
            renderWheel();
          });
          
          row.appendChild(input);
          row.appendChild(removeBtn);
          optionsContainer.appendChild(row);
        });
      }
      
      // ルーレットの表示
      function renderWheel() {
        wheel.innerHTML = '';
        
        if (options.length === 0) {
          return;
        }
        
        const sliceAngle = 360 / options.length;
        
        options.forEach((option, index) => {
          const slice = document.createElement('div');
          slice.className = 'slice';
          
          // 色を適用
          const colorIndex = index % colors.length;
          slice.style.backgroundColor = colors[colorIndex];
          
          // 回転角度を設定
          slice.style.transform = `rotate(${index * sliceAngle}deg)`;
          
          // テキストを追加
          const text = document.createElement('div');
          text.className = 'slice-text';
          text.textContent = option;
          text.style.transform = `translateX(-50%) rotate(${sliceAngle / 2}deg)`;
          
          slice.appendChild(text);
          wheel.appendChild(slice);
        });
      }
      
      // ルーレットを回転させる
      function spinWheel() {
        if (spinning || options.length === 0) return;
        spinning = true;
        
        // 結果表示をリセット
        resultElement.textContent = '';
        resultElement.classList.remove('active');
        
        btnSpin.disabled = true;
        btnSpin.textContent = '回転中...';
        
        // 回転角度をランダムに決定（5~10回転 + ランダムな角度）
        const spinAngle = 1800 + Math.floor(Math.random() * 1800);
        currentRotation += spinAngle;
        wheel.style.transform = `rotate(${currentRotation}deg)`;
        
        // 回転が終わったら結果を表示
        setTimeout(() => {
          const sliceAngle = 360 / options.length;
          const normalizedRotation = currentRotation % 360;
          const winningIndex = Math.floor(normalizedRotation / sliceAngle);
          const result = options[options.length - 1 - winningIndex % options.length];
          
          resultElement.textContent = `結果: ${result}`;
          resultElement.classList.add('active');
          
          spinning = false;
          btnSpin.disabled = false;
          btnSpin.textContent = '回転する';
        }, 5000);
      }
    });
  </script>

<!-- フッター -->
<div id="footer-placeholder"></div>
<script>
  if (!window.isScriptLoaded || !window.isScriptLoaded('/js/include.js')) {
      document.write('<script src="/js/include.js"><\/script>');
  } else {
      console.log('include.jsのロードをスキップしました');
  }
</script>

<script src="/js/script.js"></script>
</body>
</html>
